{"version":3,"sources":["Guesses.js","Keyboard.js","Lives.js","Game.js","index.js"],"names":["Guesses","word","guesses","inGame","j","display","split","forEach","char","i","letter","push","includes","style","color","textDecorationLine","length","className","paddingLeft","paddingRight","this","displayProgress","props","status","React","Component","Letter","onClick","disabled","value","Keyboard","rowLengths","keyboard","row","letterRow","renderLetter","String","fromCharCode","Lives","x","path","d","lives","hearts","getHeart","body","cx","cy","r","x1","y1","x2","y2","partsToShow","filter","v","stroke","strokeWidth","fill","viewBox","getDrawing","Game","state","ready","getWords","then","words","Math","floor","random","toUpperCase","setState","list","sum","entry","map","lengths","Array","percents","undefined","vowels","consonant","percent","console","log","normalize","Promise","all","fetch","response","text","replace","lists","concat","newLives","newGuesses","charAt","substring","toLowerCase","message","bg","backgroundColor","flex","textAlign","restart","hidden","makeGuess","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fdec0281.chunk.js","sourcesContent":["import React from 'react';\r\n// import { Text, View } from 'react-native';\r\n\r\n//Show blanks and what you have guessed correctly ( A _ _ L _ )\r\nclass Guesses extends React.Component {\r\n    displayProgress(word, guesses, inGame) {\r\n        //If you are in the game, leftover letters are blanks.\r\n        //If you lost the game, leftover blanks are the letter in red.\r\n        let j = 0;\r\n        const leftover = letter => inGame? '_' : <span style={{color: 'red', textDecorationLine: 'underline'}} key={j++}>{letter}</span>\r\n\r\n        let display = [];\r\n        word.split('').forEach((char, i) => {\r\n            display.push(guesses.includes(char)? char : leftover(char));\r\n            if (i != word.length - 1) {\r\n                display.push(' ')\r\n            }\r\n        });\r\n        return display;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div \r\n                className='guesses'\r\n                style={{paddingLeft: 5, paddingRight: 5}}\r\n                // adjustsFontSizeToFit\r\n                // numberOfLines={1}\r\n            >\r\n                {this.displayProgress(this.props.word, this.props.guesses, this.props.status == 0)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Guesses };","import React from 'react';\r\n// import { Text, View, TouchableOpacity } from 'react-native';\r\n\r\n//Custom keyboard and letters\r\n\r\n//Define letter\r\nclass Letter extends React.Component {\r\n    \r\n    render() {\r\n        return (\r\n            <div className='letterBase'>\r\n                <button \r\n                    // title={this.props.value}\r\n                    className={`letter ${this.props.status}`}\r\n                    // color='#aaa'\r\n                    // buttonStyle={this.props.styles.letter}\r\n                    onClick={this.props.onClick} \r\n                    disabled={this.props.disabled}>\r\n                        {this.props.value}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n    // render() {\r\n    //     return (\r\n    //         <div className='letter'>\r\n    //             <button className='letter man' \r\n    //             onClick={this.props.onClick} \r\n    //             disabled={this.props.disabled}>\r\n    //                 {this.props.value}\r\n    //             </button>\r\n    //         </div>\r\n    //     );\r\n    // }\r\n}\r\n\r\n//Define keyboard\r\nclass Keyboard extends React.Component {\r\n    renderLetter(value) {\r\n        let status = 'enabled';\r\n        if (this.props.guesses.includes(value)) {\r\n            status = this.props.word.includes(value) ? 'correct' : 'incorrect';\r\n        }\r\n        \r\n        return (\r\n            <Letter \r\n                value={value} \r\n                key={value}\r\n                onClick={() => this.props.onClick(value)}\r\n                disabled={this.props.guesses.includes(value)}\r\n                status = {status}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        //How many letters per row\r\n        const rowLengths = [7, 7, 6, 6];\r\n        let keyboard = [];\r\n        let i = 0;\r\n        for(let row in rowLengths) {\r\n            let letterRow = [];\r\n            for(let j = 0; j < rowLengths[row]; j++) {\r\n                letterRow.push(this.renderLetter(String.fromCharCode(65 + i)));\r\n                i++;\r\n            }\r\n            keyboard.push(\r\n                <div className='keyboardRow' key={row}>\r\n                    {letterRow}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {keyboard}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Keyboard };","import React from 'react';\r\n// import { View } from 'react-native';\r\n// import Svg, {Line, Circle, G, Path} from 'react-native-svg';\r\n\r\n//Displays lives and hangman player UI\r\nclass Lives extends React.Component {\r\n    getHeart(x) {\r\n        x = x * 50;\r\n        const path = `M 25 396 m ${x} 0 l -20 -20 l 20 20 l 20 -20 a 10,10 90 1,0 -20,-20 a 10,10 90 1,0 -20,20 z`;\r\n        return (\r\n            <g key={x}>\r\n            {/* <G style={this.props.styles.heart} key={x}> */}\r\n                <path d={path}/>\r\n            </g>\r\n        );\r\n    }\r\n\r\n    getDrawing(lives) {\r\n        let hearts = [];\r\n        for(let i = 0; i < lives; i++) {\r\n            hearts.push(this.getHeart(i));\r\n        }\r\n        let body = [\r\n            <circle key='head' cx='270' cy='137.5' r='37.5'/>,\r\n            <line key='body' x1='270' y1='175' x2='270' y2='275'/>,\r\n            <line key='left leg' x1='270' y1='275' x2='235' y2='330'/>,\r\n            <line key='right leg' x1='270' y1='275' x2='305' y2='330'/>,\r\n            <line key='left arm' x1='270' y1='225' x2='235' y2='180'/>,\r\n            <line key='right arm' x1='270' y1='225' x2='305' y2='180'/>,\r\n            \r\n            <line key='left eye 1' x1='245' y1='135' x2='260' y2='120'/>,\r\n            <line key='left eye 2' x1='260' y1='135' x2='245' y2='120'/>,\r\n\r\n            <line key='right eye 1' x1='295' y1='135' x2='280' y2='120'/>,\r\n            <line key='right eye 2' x1='280' y1='135' x2='295' y2='120'/>,\r\n\r\n            <circle key='mouth' cx='270' cy='156.25' r='10'/>\r\n        ];\r\n        //Only show some of the body, but show all of it when the game is over\r\n        if (lives > 0) {\r\n            //Only show some\r\n            let partsToShow = 7 - lives;\r\n            body = body.filter((v, i) => i < partsToShow);\r\n        }\r\n        return (\r\n            // <Svg height='400' width='400' style={this.props.styles.pencil}>\r\n            <div className='lives'>\r\n                <svg \r\n                    // height='400' width='400' \r\n                    stroke='black' strokeWidth='2' fill='none'\r\n                    // style={{width: '50%', height: '50%'}}\r\n                    viewBox='0 0 400 400'\r\n                >\r\n                    <line x1='50' y1='350' x2='150' y2='350'/>\r\n                    <line x1='100' y1='50' x2='100' y2='350'/>\r\n                    <line x1='100' y1='50' x2='270' y2='50'/>\r\n                    <line x1='270' y1='100' x2='270' y2='50'/>\r\n\r\n                    {body}\r\n                    <g stroke='none' fill='red'>\r\n                        {hearts}\r\n                    </g>\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.getDrawing(this.props.lives)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Lives };","import React from 'react';\r\nimport { Guesses } from './Guesses.js';\r\nimport { Keyboard } from './Keyboard';\r\nimport { Lives } from './Lives.js';\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ready: false,\r\n        };\r\n\r\n        //Get list of words asynchronously\r\n        this.getWords()\r\n        .then(words => {\r\n            //Save the list of words for later access\r\n            this.words = words;\r\n            // this.analyzeWords(words);\r\n            \r\n            let word = this.words[Math.floor(Math.random() * this.words.length)].toUpperCase();\r\n\r\n            //Some characters are not letters, so provide them\r\n            let given = ['-'];\r\n\r\n            //Set the state\r\n            this.setState({\r\n                ready: true,\r\n                lives: 7,\r\n                guesses: given,\r\n                word: word,\r\n                status: 0, //0: playing, 1: won, 2: lost\r\n            });\r\n        })\r\n    }\r\n\r\n    restart() {\r\n        //Get a new word\r\n        let word = this.words[Math.floor(Math.random() * this.words.length)].toUpperCase();\r\n        let given = ['-'];\r\n\r\n        this.setState({\r\n            ready: true,\r\n            lives: 7,\r\n            guesses: given,\r\n            word: word,\r\n            status: 0, //0: playing, 1: won, 2: lost\r\n        })\r\n    }\r\n\r\n    normalize(list) {\r\n        let sum = 0;\r\n        for (let entry of list) {\r\n            sum += entry;\r\n        }\r\n        return list.map(entry => entry / sum);\r\n    }\r\n    analyzeWords(words) {\r\n        let lengths = new Array(100).fill(0);\r\n        let percents = new Array(100).fill(0);\r\n\r\n        let vowelList = 'aeiouy';\r\n        for(let word of words) {\r\n            if (lengths[word.length] == undefined) lengths[word.length] = 0;\r\n            lengths[word.length]++;\r\n\r\n            let vowels = 0, consonant = 0;\r\n            for(let letter of word) {\r\n                if (vowelList.includes(letter)) {\r\n                    vowels++;\r\n                }\r\n                else {\r\n                    consonant++;\r\n                }\r\n            }\r\n            let percent = Math.floor(100.0 * vowels / word.length);\r\n            if (percents[percent] == undefined) percents[percent] = 0;\r\n            percents[percent]++;\r\n        }\r\n        console.log('PERCENTS')\r\n        console.log(percents);\r\n        console.log(this.normalize(percents));\r\n        console.log('LENGTHS')\r\n        console.log(lengths);\r\n        console.log(this.normalize(lengths));\r\n    }\r\n\r\n    /**\r\n     * Get a list of words (or phrases) for using\r\n     * @returns {Promis} An promise to return the list of words. Use .then on this to get the list\r\n     */\r\n    getWords() {\r\n        //There are multiple lists of words, each in separate files, so read each one and add it to the master list\r\n        let wordLists = ['/Hangman/nouns.txt', '/Hangman/adjectives.txt'];\r\n\r\n        return Promise.all(\r\n            wordLists.map(list => fetch(list)\r\n            .then(response => response.text())\r\n            .then(words => {\r\n                //Remove /r (carriage return) and split it by lines (expecting one word/phrase per line)\r\n                return words.replace(/\\r/g, '').split('\\n');\r\n            }))\r\n        )\r\n        .then(lists => {\r\n            //lists is an array of arrays (each array is from a separate file), so flatten it into one array\r\n            return [].concat(...lists)\r\n        })\r\n    }\r\n\r\n    makeGuess(letter) {\r\n        //You can only play if you have lives left\r\n        if (this.state.lives <= 0) return;\r\n\r\n        if (!this.state.guesses.includes(letter)) {\r\n            if (this.state.word.includes(letter)) {\r\n                //Correct guess. Because the guess is added anyway, nothing happens here.\r\n                console.log('It has ' + letter + '!');\r\n            }\r\n            else {\r\n                //State does not update syncronously, so the old state must be used to detect a loss\r\n                let newLives = this.state.lives - 1;\r\n\r\n                //Incorrect guess\r\n                console.log('There is no ' + letter + '.');\r\n                //Decrease lives by 1\r\n                this.setState({\r\n                    lives: newLives,\r\n                });\r\n\r\n                //Check for game over state (ran out of lives)\r\n                if (newLives <= 0) {\r\n                    //Game over!\r\n                    console.log('Game over! The word was '+this.state.word)\r\n                    this.setState({\r\n                        status: 2,\r\n                    });\r\n                }\r\n            }\r\n            //State does not update syncronously, so the old state must be used to detect a win\r\n            let newGuesses = this.state.guesses.concat([letter]);\r\n            //Add the guess to the state\r\n            this.setState({\r\n                guesses: newGuesses,\r\n            });\r\n\r\n            //Check for win state by getting all characters that have not been guessed\r\n            if (this.state.word.split('').filter(char => !newGuesses.includes(char)).length <= 0) {\r\n                //You win!\r\n                console.log('You win! The word was '+this.state.word)\r\n                this.setState({\r\n                    status: 1,\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            console.log('Already guessed ' + letter);\r\n        }\r\n    }\r\n\r\n    capital(word) {\r\n        return word.charAt(0).toUpperCase() + word.substring(1).toLowerCase();\r\n    }\r\n    upper(word) {\r\n        return word.toUpperCase();\r\n    }\r\n    lower(word) {\r\n        return word.toLowerCase();\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.ready) return 'Loading...'\r\n        let message = '';\r\n        let bg = 'white';\r\n        if (this.state.status === 1) {\r\n            message = 'You won!';\r\n            bg = 'lightgreen';\r\n        }\r\n        if (this.state.status === 2) {\r\n            message = 'You lost!';\r\n            bg = 'lightpink';\r\n        }\r\n\r\n        return (\r\n            <div className='container' style={{backgroundColor: bg}}>\r\n                <div style={{flex: '3'}}>\r\n                    <div className='status'>\r\n                        {message}\r\n                    </div>\r\n                    <div style={{textAlign: 'center'}}>\r\n                        <button \r\n                            className='restart' \r\n                            onClick={() => this.restart()}\r\n                            hidden={this.state.status === 0}\r\n                        >\r\n                            Play Again\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div style={{flex: '5'}}>\r\n                    <Lives \r\n                        lives={this.state.lives}\r\n                    />\r\n                </div>\r\n                <div style={{flex: '2'}}>\r\n                    <Guesses \r\n                        word={this.state.word} \r\n                        guesses={this.state.guesses}\r\n                        status={this.state.status}\r\n                    />\r\n                </div>\r\n                <div style={{flex: '5'}}>\r\n                    <Keyboard \r\n                        onClick={letter => this.makeGuess(letter)} \r\n                        word={this.state.word} \r\n                        guesses={this.state.guesses} \r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Game };","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Game } from './Game';\r\nimport './index.css';\r\n  \r\n\r\nReactDOM.render(\r\n    <Game/>,\r\n    document.getElementById('root')\r\n);\r\n  "],"sourceRoot":""}